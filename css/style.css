*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }

body {
  font-family: "Nunito", sans-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  /*	layout will have six rows: 
			- first row 80 of viewport
			- second row of minimal content height (depends on content)
			- third row of 40% viewport width
			- three rows will have min-content height (repeat function => first attr. stands for how many rows, second height of row)
	*/
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /* 
		creates 11 column layout: 
			- 1 column with 8rem fixed width [sidebar-start][sidebar-end]
			- 1 column (1fr max or 6rem min) which fullfils remaining space [full-start]
			- 8 columns with width setted by minmax function: [col-start] [col-end]
				- minmax sets: 
					- first attribute of minimal width of each column,
					- second attribute of maximal width of each column(14rem)
			- 1 column (1fr max or 6rem min) which fullfils remaining space
	*/
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; }

.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483A; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483A; }

.btn {
  background-color: #c69963;
  color: #fff;
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all .2s; }
  .btn:hover {
    background-color: #B28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1; }

.header {
  background-color: #54483A;
  grid-column: full-start / col-end 6; }

.realtors {
  background-color: #101d2c;
  grid-column: col-start 7 / full-end; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /* 
        - creates as much cols as fit on screen between 25rem and 1 fr, same width | rows are automatically generated
        - as we have auto generated rows, e.g. at the start we have:
            - 2 rows and 3 cols (each 400px):
                - as each column will be decreased to less than 250px:
                - layout will be changed to 3 rows by 2 cols (each 400px circa)
            - same story until 1 row, 6 cols (each 400px circa)
    */
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 6rem;
  /*
        - children elements will be align to the start (default-stretch)
        - if we align-items in this class:
            - it will aligns .feature elements
    */
  align-items: start; }

.feature {
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem; }
  .feature__icon {
    fill: #c69963;
    width: 4.5rem;
    height: 4.5rem;
    transform: translateY(-1.1rem);
    /* 
            - if we use 1/1:
                - we did not specify grid-template-rows, so we can use just number of rows that are specified (explicit)
        */
    grid-row: 1 / span 2; }
  .feature__text {
    font-size: 1.7rem; }

.story__pictures {
  background-color: #c69963;
  grid-column: full-start / col-end 4; }

.story__content {
  /*
			FLEX SOLUTION
			- we need to use just one direction, not two
			- in this case its better to use display flex than display grid 
			
			display: flex;
			flex-direction: column;
			justify-content: center;
			
			- fix for stretched btn to 100% width of flex container
			align-items: flex-start;
			
		*/
  /*
			GRID SOLUTION
		*/
  display: grid;
  align-content: center;
  /*
			horizontally aligning of items:
				- like flex-direction: row;
				- justify-content: flex-start;
		*/
  justify-items: start;
  background-color: #f9f7f6;
  grid-column: col-start 5 / full-end;
  padding: 6rem 8vw; }

.story__text {
  font-size: 1.5rem;
  font-style: italic;
  margin-bottom: 4rem; }

.homes {
  background-color: #101d2c;
  grid-column: center-start / center-end; }

.gallery {
  background-color: #54483A;
  grid-column: full-start / full-end; }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end; }
